<Window x:Class="krackal.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:krackal"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition />
        </Grid.ColumnDefinitions>

        <TextBlock VerticalAlignment="Top" Margin="90,55,0,0" FontFamily="Times New Roman" FontSize="15" Grid.ColumnSpan="2" >Кол-во</TextBlock>
        <TextBlock VerticalAlignment="Top" Margin="90,73,0,0" FontFamily="Times New Roman" FontSize="15" Grid.ColumnSpan="2">вершин:</TextBlock>
        <TextBox Name="vertex_matrix"  Background="BurlyWood" Width="30" Height="30" VerticalAlignment="Top" Margin="150,60,208,0" FontFamily="Times New Roman" FontSize="30" />

        <TextBlock VerticalAlignment="Top" HorizontalAlignment="Center" Margin="200,55,120,0" FontFamily="Times New Roman" FontSize="15">Кол-во</TextBlock>
        <TextBlock VerticalAlignment="Top" HorizontalAlignment="Center" Margin="200,73,120,0" FontFamily="Times New Roman" FontSize="15">ребер:</TextBlock>
        <TextBox Name="edges_matrix"  Background="BurlyWood"  Width="30" Height="30" VerticalAlignment="Top" Margin="170,60,0,0" FontFamily="Times New Roman" FontSize="30" />

        <TextBox Name="matrix_form"  Background="BurlyWood"  Width="200" Height="200" VerticalAlignment="Center" />


        <Button Name="mat_size_btn" Click="mat_size_btn_Click" Background="PowderBlue"  Width="120" Height="40"  Grid.Column="1" Margin="0,0,0,344" Content="Решить" HorizontalAlignment="Center" FontFamily="Times New Roman" FontSize="23" />
        <Button Name="n_clc" Click="n_clc_Click" Background="PowderBlue" Grid.Column="1" Width="250" Height="40" HorizontalAlignment="Center" VerticalAlignment="Center" Content="Перейти на след строку" FontFamily="Times New Roman" FontSize="23" Margin="0,0,0,80" />
        <Button Name="btn_file" Click="btn_file_Click" Background="PowderBlue" Grid.Column="1" Height="40" Width="210" Content="Посчитать из файла" Margin="0,0,0,220" HorizontalAlignment="Center" FontFamily="Times New Roman" FontSize="23" />
        <Button Name="steret" Click="steret_Click"  Background="Lavender"  Grid.Column="1" Height="40" Width="150" Content="Стереть" Margin="0,120,0,0" HorizontalAlignment="Center" FontFamily="Times New Roman" FontSize="23" />
        <Button Name="exit" Click="exit_Click"  Background="Salmon"  Grid.Column="1" Height="40" Width="150" Content="Закрыть" Margin="0,250,0,0" HorizontalAlignment="Center" FontFamily="Times New Roman" FontSize="23" />
    </Grid>
</Window>




using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace krackal
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }
        public struct Edge
        {
            public int Source;
            public int Destination;
            public int Weight;
        }

        public struct Graph
        {
            public int VerticesCount;
            public int EdgesCount;
            public Edge[] edge;
        }

        public struct Subset
        {
            public int Parent;
            public int Rank;
        }

        public static Graph CreateGraph(int verticesCount, int edgesCoun)
        {
            Graph graph = new Graph();
            graph.VerticesCount = verticesCount;
            graph.EdgesCount = edgesCoun;
            graph.edge = new Edge[graph.EdgesCount];

            return graph;
        }

        private static int Find(Subset[] subsets, int i)
        {
            if (subsets[i].Parent != i)
                subsets[i].Parent = Find(subsets, subsets[i].Parent);

            return subsets[i].Parent;
        }

        private static void Union(Subset[] subsets, int x, int y)
        {
            int xroot = Find(subsets, x);
            int yroot = Find(subsets, y);

            if (subsets[xroot].Rank < subsets[yroot].Rank)
                subsets[xroot].Parent = yroot;
            else if (subsets[xroot].Rank > subsets[yroot].Rank)
                subsets[yroot].Parent = xroot;
            else
            {
                subsets[yroot].Parent = xroot;
                ++subsets[xroot].Rank;
            }
        }

        private static void Print(Edge[] result, int e, bool file_is)
        {
            string mes = "";
            for (int i = 0; i < e; ++i)
                mes += $"{result[i].Source} -- {result[i].Destination} == {result[i].Weight} \n";
            if (file_is == true)
            {
                using (StreamWriter stream = new StreamWriter("output.txt", false))
                {
                    stream.WriteLine(mes);
                }
                MessageBox.Show("Решение записано в файл!");

            }
            else MessageBox.Show(mes);
        }

        public static void Kruskal(Graph graph, bool file_is)
        {
            int verticesCount = graph.VerticesCount;
            Edge[] result = new Edge[verticesCount];
            int i = 0;
            int e = 0;

            Array.Sort(graph.edge, delegate (Edge a, Edge b)
            {
                return a.Weight.CompareTo(b.Weight);
            });

            Subset[] subsets = new Subset[verticesCount];

            for (int v = 0; v < verticesCount; ++v)
            {
                subsets[v].Parent = v;
                subsets[v].Rank = 0;
            }

            while (e < verticesCount - 1)
            {
                Edge nextEdge = graph.edge[i++];
                int x = Find(subsets, nextEdge.Source);
                int y = Find(subsets, nextEdge.Destination);

                if (x != y)
                {
                    result[e++] = nextEdge;
                    Union(subsets, x, y);
                }
            }
            Print(result, e,file_is);
        }


        public int N; //кол-во вершин
        public int M; //кол-во ребер
        private void mat_size_btn_Click(object sender, RoutedEventArgs e)
        {
            N = Int32.Parse(vertex_matrix.Text);
            M = Int32.Parse(edges_matrix.Text);
            int[,] matrix = new int[N, N];
            string[] input_matrix = matrix_form.Text.Split('\n');
            string[] qq;
            Graph graph = CreateGraph(N, M);
            for (int i = 0; i <M; i++)
            {
                qq = input_matrix[i].Split(' ');
                int a = int.Parse(qq[0]);
                int b = int.Parse(qq[1]);
                int c = int.Parse(qq[2]);
                graph.edge[i].Source = a;
                graph.edge[i].Destination = b;
                graph.edge[i].Weight = c;
            }
            bool f = false;
            Kruskal(graph, f);

        }

        private void btn_file_Click(object sender, RoutedEventArgs e)
        {
            StreamReader file = new StreamReader("input.txt");
            string s = file.ReadToEnd();
            file.Close();
            string[] str = s.Split('\n');
            string[] col = str[0].Split(' ');
            N = int.Parse(col[0]);
            M = int.Parse(col[1]);
            Graph graph = CreateGraph(N,M);
           

            for (int i = 1; i <= M; i++)
            {
                col = str[i].Split(' ');
                int a = int.Parse(col[0]);
                int b = int.Parse(col[1]);
                int c = int.Parse(col[2]);
                graph.edge[i - 1].Source = a;
                graph.edge[i - 1].Destination = b;
                graph.edge[i - 1].Weight = c;
            }
            bool f = true;
            Kruskal(graph,f);

        }
        private void n_clc_Click(object sender, RoutedEventArgs e)
        {
            matrix_form.Text += '\n';
        }

        private void steret_Click(object sender, RoutedEventArgs e)
        {
            vertex_matrix.Text = "";
            edges_matrix.Text = "";
            matrix_form.Text = "";
        }

        private void exit_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }
    }
}
