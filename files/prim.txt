<Window x:Class="prim.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:prim"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" Background="Cornsilk">

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition />
        </Grid.ColumnDefinitions>
        <TextBox Name="N_matrix"  Background="Thistle"  Width="30" Height="30" VerticalAlignment="Top" Margin="150,60,208,0" FontFamily="Times New Roman" FontSize="30" />
        <TextBox Name="some_matrix"  Background="Thistle"  Width="200" Height="200" VerticalAlignment="Center" />
        <Button Name="res_btn" Click="res_btn_Click" Grid.Column="1" Width="200" Height="50" Content="Прочитать граф" Background="PowderBlue" FontFamily="Times New Roman" FontSize="23"/>
        <Button Name="enter_btn" Click="enter_btn_Click" Grid.Column="1" Width="200" Height="50" Content="Новая строка" Margin="0,0,0,150" Background="PowderBlue" FontFamily="Times New Roman" FontSize="23"/>
        <Button Name="file_btn" Click="file_btn_Click" Grid.Column="1" Width="200" Height="50" Content="Матрица из графа" Margin="0,0,0,300" Background="PowderBlue" FontFamily="Times New Roman" FontSize="23"/>
        <Button Name="steret" Click="steret_Click"  Background="Lavender"  Grid.Column="1" Height="40" Width="150" Content="Стереть" Margin="0,150,0,0" HorizontalAlignment="Center" FontFamily="Times New Roman" FontSize="23" />
        <Button Name="exit" Click="exit_Click"  Background="Salmon"  Grid.Column="1" Height="40" Width="150" Content="Закрыть" Margin="0,270,0,0" HorizontalAlignment="Center" FontFamily="Times New Roman" FontSize="23" />
    </Grid>
</Window>






using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace prim
{
    /// <summary>
    /// Логика взаимодействия для MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }


        private void enter_btn_Click(object sender, RoutedEventArgs e)
        {
            some_matrix.Text += '\n';
        }

        public int N;
        private void res_btn_Click(object sender, RoutedEventArgs e)
        {
            N = Int32.Parse(N_matrix.Text);
            int[,] matrix = new int[N, N];
            string[] input_matrix = some_matrix.Text.Split('\n');
            string[] qq;
            for (int i = 0; i < N; i++)
            {
                qq = input_matrix[i].Split(' ');
                for (int j = 0; j < N; j++)
                {
                    int t = int.Parse(qq[j]);
                    if(t == 0)
                    {
                        matrix[i, j] = 999999;
                    }
                    else matrix[i, j] = t;
                }
            }
            string mes = "";

            List<bool> inMST = new List<bool>();
            for (int i = 0; i < N; i++)
                inMST.Add(false);
            inMST[0] = true;
            int edge_count = 0, mincost = 0;
            int a = 0, b = 0;
            while (edge_count < N - 1)
            {
                int min = 999999; a = -1; b = -1;
                for (int i = 0; i < N; i++)
                {
                    for (int j = 0; j < N; j++)
                    {
                        if (matrix[i, j] < min)
                        {
                            if (isValid(i, j, inMST))
                            {
                                min = matrix[i, j];
                                a = i;
                                b = j;
                            }
                        }
                    }
                }
                if (a != -1 && b != -1)
                {
                    mes += $"{a + 1} - {b + 1} cost:{min}\n";
                    mincost = mincost + min;
                    inMST[b] = true;
                    inMST[a] = true;
                }
                edge_count++;
            }
            mes += $"mincost = {mincost}";
            MessageBox.Show(mes);
        }


        private void file_btn_Click(object sender, RoutedEventArgs e)
        {
            StreamReader file = new StreamReader("input.txt");
            string s = file.ReadToEnd();
            file.Close();
            string[] str = s.Split('\n');
            string[] col = str[0].Split(' ');
            int[,] matrix = new int[str.Length, col.Length];
            int t = 0;
            for (int i = 0; i < str.Length; i++)
            {
                col = str[i].Split(' ');
                for (int j = 0; j < col.Length; j++)
                {
                    t = Convert.ToInt32(col[j]);
                    if(t == 0)
                    {
                        matrix[i, j] = 999999;
                    }
                    else matrix[i, j] = t;

                }
            }
            N = str.Length;
            string mes = "";

            List<bool> inMST = new List<bool>();
            for(int i = 0; i < N; i++)
                inMST.Add(false);
            inMST[0] = true;
            int edge_count = 0, mincost = 0;
            int a = 0, b = 0;
            while (edge_count < N - 1)
            {
                int min = 999999; a = -1; b = -1;
                for (int i = 0; i < N; i++)
                {
                    for(int j = 0; j < N; j++)
                    {
                        if (matrix[i,j]<min)
                        {
                            if(isValid(i,j,inMST))
                            {
                                min = matrix[i, j];
                                a = i;
                                b = j;
                            }
                        }
                    }
                }
                if(a!=-1 && b!=-1)
                {
                    mes += $"{a+1} - {b+1} cost:{min}\n";
                    mincost = mincost + min;
                    inMST[b] = true;
                    inMST[a] = true;
                }
                edge_count++;
            }
            mes += $"mincost = {mincost}";
                    printResult(mes);
        }

        public bool isValid(int u, int v, List<bool> inMST)
        {
            if (u == v)
                return false;
            if (inMST[u] == false && inMST[v] == false)
                return false;
            else if (inMST[u] == true && inMST[v] == true)
                return false;
            return true;
        }

        public void printResult(string result)
        {
            using (StreamWriter stream = new StreamWriter("output.txt", false))
            {
                stream.WriteLine(result);
            }
            MessageBox.Show("Решение записано в файл!");
        }

        private void exit_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void steret_Click(object sender, RoutedEventArgs e)
        {
            N_matrix.Text = "";
            some_matrix.Text = "";
        }
    }
}
